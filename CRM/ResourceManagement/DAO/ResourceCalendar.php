<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from resource-management/xml/schema/CRM/ResourceManagement/ResourceCalendar.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:8d25106e77d33b76bf9d8245a5469cdb)
 */
use CRM_ResourceManagement_ExtensionUtil as E;

/**
 * Database access object for the ResourceCalendar entity.
 */
class CRM_ResourceManagement_DAO_ResourceCalendar extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_resource_calendar';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Unique ResourceCalendar ID
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $id;

  /**
   * Calendar Title
   *
   * @var string|null
   *   (SQL type: varchar(255))
   *   Note that values will be retrieved from the database as a string.
   */
  public $calendar_title;

  /**
   * Null or resource type name
   *
   * @var varchar(64)
   */
  public $calendar_type;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_resource_calendar';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Resource Calendars') : E::ts('Resource Calendar');
  }

  /**
   * Returns foreign keys and entity references.
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  public static function getReferenceColumns() {
    if (!isset(Civi::$statics[__CLASS__]['links'])) {
      Civi::$statics[__CLASS__]['links'] = static::createReferenceColumns(__CLASS__);
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'calendar_type_id', 'civicrm_contact_type', 'id');
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
    }
    return Civi::$statics[__CLASS__]['links'];
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('ID'),
          'description' => E::ts('Unique ResourceCalendar ID'),
          'required' => TRUE,
          'where' => 'civicrm_resource_calendar.id',
          'table_name' => 'civicrm_resource_calendar',
          'entity' => 'ResourceCalendar',
          'bao' => 'CRM_ResourceManagement_DAO_ResourceCalendar',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
          ],
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'calendar_title' => [
          'name' => 'calendar_title',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => E::ts('Calendar Title'),
          'description' => E::ts('Calendar Title'),
          'where' => 'civicrm_resource_calendar.calendar_title',
          'table_name' => 'civicrm_resource_calendar',
          'entity' => 'ResourceCalendar',
          'bao' => 'CRM_ResourceManagement_DAO_ResourceCalendar',
          'localizable' => 0,
          'add' => '1.0',
        ],
        'calendar_type' => [
          'name' => 'calendar_type',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => E::ts('Calendar Type'),
          'description' => E::ts('Null or resource name'),
          'where' => 'civicrm_resource_calendar.calendar_type',
          'table_name' => 'civicrm_resource_calendar',
          'entity' => 'ResourceCalendar',
          'bao' => 'CRM_ResourceManagement_DAO_ResourceCalendar',
          'localizable' => 0,
          'add' => '1.0',
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'resource_calendar', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'resource_calendar', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
